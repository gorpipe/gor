:orphan:

.. _formulas:

=========
FORMULAS
=========

The following tables contain all formulas that can be used in WHERE and CALC expressions in GOR queries.

Boolean Functions
=================

+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``IF(cond,any,any) : any``               | Return the second parameter if the condition expression is true,                           |
|                                          | otherwise the third parameter.                                                             |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``ISINT(col) : bool``                    | Test if a column has integer value.                                                        |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``ISFLOAT(col) : bool``                  | Test if a column has floating point value.                                                 |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``LISTHASANY(str,lit-list) : bool``      | Returns true if the comma separated list has an element in the lit-list.                   |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``CONTAINS(str,lit-list) : bool``        | Returns true if the string contains all the string literals in the list.                   |
|                                          | Not case-sensitive.                                                                        |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``CSCONTAINS((str,lit-list) : bool``     | Case-sensitive version of CONTAINS.                                                        |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``CONTAINSCOUNT(str,lit-list) : int``    | Returns a number indicating how many items in the literal list are contained in the string.|
|                                          | Also try CONTAINSANY, CSCONTAINSANY, CSCONTAINSCOUNT, LISTHASCOUNT, and CSLISTHASCOUNT     |
+------------------------------------------+--------------------------------------------------------------------------------------------+
| ``EVAL(string) : string``                | Returns the result of a GOR/NOR query                                                      |
+------------------------------------------+--------------------------------------------------------------------------------------------+


Type and String Conversion
==========================

+---------------------------------+----------------------------------------------------------------------------------+
| ``STR(num) : str``              | Convert number to string.                                                        |
+---------------------------------+----------------------------------------------------------------------------------+
| ``STRING(num) : str``           | Same as STR.                                                                     |
+---------------------------------+----------------------------------------------------------------------------------+
| ``FLOAT(str) : float``          | Convert string to float.                                                         |
+---------------------------------+----------------------------------------------------------------------------------+
| ``FLOAT(str, float) : float``   | Convert string to float with default value.                                      |
+---------------------------------+----------------------------------------------------------------------------------+
| ``NUMBER(str) : float``         | Same as FLOAT.                                                                   |
+---------------------------------+----------------------------------------------------------------------------------+
| ``INT(str) : int``              | Convert string to integer.                                                       |
+---------------------------------+----------------------------------------------------------------------------------+
| ``BASE26(num) : str``           | Converts an integer number to base 26 representation.                            |
+---------------------------------+----------------------------------------------------------------------------------+
| ``BASEPN(num) : str``           | Converts an integer number to PN-like ID, e.g. AAAAAAA                           |
+---------------------------------+----------------------------------------------------------------------------------+
| ``LEN(str) : int``              | The length of the string.                                                        |
+---------------------------------+----------------------------------------------------------------------------------+
| ``REVERSE(str) : str``          | The string reversed.                                                             |
+---------------------------------+----------------------------------------------------------------------------------+
| ``TRIM(str) : str``             | The string trimmed.                                                              |
+---------------------------------+----------------------------------------------------------------------------------+
| ``MD5(str) : str``              | The MD5 message-digest of the string.                                            |
+---------------------------------+----------------------------------------------------------------------------------+
| ``IOOA(str) : int``             | In order of appearance, i.e. returns an integer number                           |
|                                 | based on the order in which str value shows up.                                  |
+---------------------------------+----------------------------------------------------------------------------------+
| ``UPPER(str) : str``            | Upper-case a string.                                                             |
+---------------------------------+----------------------------------------------------------------------------------+
| ``LOWER(str) : str``            | Lower-case a string.                                                             |
+---------------------------------+----------------------------------------------------------------------------------+
| ``LEFT(str,int) : str``         | Return the specified left-most characters in a string.                           |
+---------------------------------+----------------------------------------------------------------------------------+
| ``RIGHT(str,int) : str``        | Return the specified right-most characters in a string.                          |
+---------------------------------+----------------------------------------------------------------------------------+
| ``SUBSTR(str,int,int) : str``   | A substring.  A zero-based range, not including the last position.               |
+---------------------------------+----------------------------------------------------------------------------------+
| ``MID(str,int,int) : str``      | A substring.  A zero-based starting position and size.                           |
+---------------------------------+----------------------------------------------------------------------------------+
| ``REPLACE(str,str,str) : str``  | Replace from a string a pattern with the new string.                             |
+---------------------------------+----------------------------------------------------------------------------------+
| ``POSOF(str,str) : int``        | The position within a string of a string.  -1 if not found.                      |
+---------------------------------+----------------------------------------------------------------------------------+
| ``BRACKETS(string) : string``   | Adds brackets around the string, e.g. LISTMAP(LISTZIP(col1,col2),'BRACKETS(x)'). |
+---------------------------------+----------------------------------------------------------------------------------+
| ``UNBRACKET(string) : string``  | Removes surrounding brackets from a string.                                      |
+---------------------------------+----------------------------------------------------------------------------------+
| ``FORM(num,int,int) : str``     | Format a number, specifying the space and decimals (C-style %x.yf format style). |
+---------------------------------+----------------------------------------------------------------------------------+
| ``REGSEL(str,str-const) : str`` | Extract a single substring based on regular expression binding pattern,          |
|                                 | e.g. with single brackets.                                                       |
+---------------------------------+----------------------------------------------------------------------------------+
| ``DECODE(str,str) : str``       | Decode (map) the string, given key-value mapping pairs.                          |
+---------------------------------+----------------------------------------------------------------------------------+
| ``MATCHLEN(str,str) : int``     | Count the length of matching substrings for the two strings                      |
+---------------------------------+----------------------------------------------------------------------------------+

Algebraic Functions
===================

+-------------------------------+------------------------------------------------------------------------------+
| ``FLOOR() : int``             | Floor value, e.g. the largest integer that is smaller or equal.              |
+-------------------------------+------------------------------------------------------------------------------+
| ``INT(num) : int``            | Same as Floor.                                                               |
+-------------------------------+------------------------------------------------------------------------------+
| ``CEIL(num) : int``           | Ceiling value, e.g. the smallest integer that is larger or equal.            |
+-------------------------------+------------------------------------------------------------------------------+
| ``ROUND(num) : int``          | The closest integer.                                                         |
+-------------------------------+------------------------------------------------------------------------------+
| ``DIV(int,int) : int``        | The quotient in integer division.                                            |
+-------------------------------+------------------------------------------------------------------------------+
| ``MOD(int,int) : int``        | The remainder in integer division.                                           |
+-------------------------------+------------------------------------------------------------------------------+
| ``POW(num,num) : float``      | Raise the first parameter to the power of the second.                        |
+-------------------------------+------------------------------------------------------------------------------+
| ``MIN(num,num) : num``        | Minimum.                                                                     |
+-------------------------------+------------------------------------------------------------------------------+
| ``MAX(num,num) : num``        | Maximum.                                                                     |
+-------------------------------+------------------------------------------------------------------------------+
| ``SQRT(num) : float``         | Square root.                                                                 |
+-------------------------------+------------------------------------------------------------------------------+
| ``SQR(num) : float``          | Square.                                                                      |
+-------------------------------+------------------------------------------------------------------------------+
| ``ABS(num) : num``            | The absolute value, e.g. abs(x) = \|x\|.                                     |
+-------------------------------+------------------------------------------------------------------------------+
| ``LOG(num) : float``          | 10-based logarithm.                                                          |
+-------------------------------+------------------------------------------------------------------------------+
| ``LN(num) : float``           | Natural logarithm.                                                           |
+-------------------------------+------------------------------------------------------------------------------+
| ``EXP(num) : float``          | The exponent, e.g. exp(x) = e^x.                                             |
+-------------------------------+------------------------------------------------------------------------------+
| ``RANDOM() : num``            | A random floating point number.                                              |
+-------------------------------+------------------------------------------------------------------------------+
| ``SEGDIST(x,y,a,b) : num``    | The distance between two segments. Returns 0 if segments overlap.            |
+-------------------------------+------------------------------------------------------------------------------+
| ``SEGOVERLAP(x,y,a,b) : num`` | Determines if two segments overlap.                                          |
+-------------------------------+------------------------------------------------------------------------------+


Trigonometric Functions
=======================

+---------------------------+------------------------------------------------------------------------------+
| ``SIN(num) : float``      | Sine based on radians.                                                       |
+---------------------------+------------------------------------------------------------------------------+
| ``COS(num) : float``      | Cosine based on radians.                                                     |
+---------------------------+------------------------------------------------------------------------------+
| ``ASIN(num) : float``     | Arc-sine or inverse sine.                                                    |
+---------------------------+------------------------------------------------------------------------------+
| ``ACOS(num) : float``     | Arc-cosine.                                                                  |
+---------------------------+------------------------------------------------------------------------------+
| ``TAN(num) : float``      | Tangents based on radians.                                                   |
+---------------------------+------------------------------------------------------------------------------+
| ``ATAN(num) : float``     | Arc-tangents.                                                                |
+---------------------------+------------------------------------------------------------------------------+


Statistical Functions
=====================

+------------------------------------+---------------------------------------------------------------------------------+
| ``CHI(int,int,int,int) : float``   | The chi-squared value in a 2x2 table.                                           |
+------------------------------------+---------------------------------------------------------------------------------+
| ``CHI2(float,float) : float``      | Chi-square complement.                                                          |
+------------------------------------+---------------------------------------------------------------------------------+
| ``CHISQUARE(float,float) : float`` | Chi-square                                                                      |
+------------------------------------+---------------------------------------------------------------------------------+
| ``CHISQUARECOMPL(float,float)``    | Chi-square complement.  Same as CHI2.                                           |
+------------------------------------+---------------------------------------------------------------------------------+
| ``PVAL(int,int,int,int) : float``  | The 2-sided Fisher-exact or Chi-square based p-val for a 2x2 table.             |
+------------------------------------+---------------------------------------------------------------------------------+
| ``PVALONE(int,..,int) : float``    | The one-sided Fisher-exact or Chi-square based p-val for a 2x2 table.           |
+------------------------------------+---------------------------------------------------------------------------------+
| ``STUDENT(int,float) : float``     | Student T distribution.  (degrees of freedom, integration end point)            |
+------------------------------------+---------------------------------------------------------------------------------+
| ``INVSTUDENT(float,int) : float``  | Inverse Student T distribution (alpha, size).                                   |
+------------------------------------+---------------------------------------------------------------------------------+
| ``NORMAL(float) : float``          | Normal distribution                                                             |
+------------------------------------+---------------------------------------------------------------------------------+
| ``INVNORMAL(float) : float``       | Inverse Normal distribution.                                                    |
+------------------------------------+---------------------------------------------------------------------------------+
| ``POISSON(int,float) : float``     | Poisson distribution.                                                           |
+------------------------------------+---------------------------------------------------------------------------------+
| ``POISSONC(int,float) : float``    | Poisson complement.                                                             |
|                                    | See http://acs.lbl.gov/software/colt/api/cern/jet/stat/Probability.html         |
+------------------------------------+---------------------------------------------------------------------------------+


List Functions
==============

+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTFIRST(string[,sep]) : string``                 | First element in a comma separated list, e.g. the head, with an optional separator argument.                 |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTSECOND(string[,sep]) : string``                | Second element in a comma separated list, with an optional separator argument.                               |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNTH(string,int[,sep]) : string``               | Nth element in a comma separated list, with an optional separator argument.                                  |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTLAST(string,[,sep]) : string``                 | Last element in a comma separated list, with an optional separator argument.                                 |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTTAIL(string[,sep]) : string``                  | The tail (the list minus the first element), with an optional separator argument.                            |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTREVERSE(string) : string``                     | The list reversed.                                                                                           |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTSORTASC(string) : string``                     | The list sorted alphabetically in a ascending order.                                                         |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTSORTDESC(string) : string``                    | The list sorted alphabetically in a descending order                                                         |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMSORTASC(string) : string``                  | The list sorted numerically in a ascending order.                                                            |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMSORTDESC(string): string``                  | The list sorted numerically in a descending order                                                            |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTTRIM(string) : string``                        | A comma separated list trimmed from white-spaces.                                                            |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTDIST(string) : string``                        | The distinct elements in the list, i.e. corresponding set.                                                   |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTMAX(string) : string``                         | The maximum element (element as string).                                                                     |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTMIN(string) : string``                         | The minimum element (element as string).                                                                     |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTSIZE(string[,sep]) : int``                     | The size of the list, with an optional separator argument.                                                   |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTCOUNT(string[,sep]) : int``                    | Count frequency of elements in a list, returning the pairs (e1;count1,..,en;countn).                         |
|                                                      | Optional separator argument.                                                                                 |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMMAX(string) : float``                       | The maximum element (element as number).                                                                     |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMMIN(string) : float``                       | The minimum element (element as number).                                                                     |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMSUM(string) : float``                       | The sum of the elements (element as numbers).                                                                |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMAVG(string) : float``                       | The average of the elements (element as numbers).                                                            |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTNUMSTD(string) : float``                       | The unbiased standard deviation of the elements (element as numbers).                                        |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTMAP(string,str-con[,sep]) : str``              | The list translated using expression provided in second argument.  Element denoted with x.                   |
|                                                      | Optional separator argument.                                                                                 |
|                                                      | Example LISTMAP(col,'x+1') or LISTMAP(col,'x+\'text\'')                                                      |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTFILTER(str,str-con[,sep]) : str``              | The list filtered using expression provided in second argument.  Element as x, index as i.                   |
|                                                      | Optional separator argument.                                                                                 |
|                                                      | Example LISTFILTER(col,'x != 1') or LISTFILTER(col,'i > 2')                                                  |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTZIP(string,string[,sep,delim]) : str``         | Two lists zipped together, each pair of elements separated with a semicolon.                                 |
|                                                      | Optional separator and delimiter arguments.                                                                  |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTZIPFILTER(str,str,str-con[,sep,delim]) : str`` | Filter the first list by the content of the second list. Optional separator and delimiter arguments.         |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTCOMP(str,int,int) : str``                      | Returns a semi-comma-separated list of all combinations of elements in the input list of length within       |
|                                                      | the interval specified by the input integers.                                                                |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``LISTADD(str,str[,sep]) : str``                     | Returns a list with the given item added to the end, with an optional separator argument.                    |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``COLS2LIST(str[,sep]) : str``                       | Collapse values from multiple columns into a single list, with an optional separator argument.               |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
| ``COLS2LISTMAP(str,str[,sep]) : str``                | Collapse values from multiple columns into a single list with an expression applied, with optional           |
|                                                      | separator argument.                                                                                          |
+------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+


Genomic-Specific Functions
==========================

+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``HAPLDIFF(str,str) : int``                           | The Hamming-like distance between two haplotype strings.                                                                        |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``VARSIG(str,str) : str``                             | Variant signature.                                                                                                              |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``REVCOMPL(str) : str``                               | Reverse complement of a DNA sequence string.                                                                                    |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``RC(str) : str``                                     | Shorthand for REVCOMPL(str).                                                                                                    |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``REVCIGAR(str) : str``                               | BAM cigar string for the corresponding reverse complement sequence.                                                             |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``REFBASE(str,int) : str``                            | The reference base at the given locus,                                                                                          |
|                                                       | based on the build specified in the gor_config.txt file.                                                                        |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``REFBASES(str,int,int) : str``                       | The reference bases, based on the build specified in the gor_config.txt file.                                                   |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``BAMTAG(col,str) : str``                             | Extract a single substring from an attribute value TAG_VALUE-like field (as in BAM files).                                      |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``TAG(col,str,sep) : str``                            | Extract a single substring from an attribute value field (as in GFF or VCF files, e.g. use semicolon ';' as separator).         |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``IHA(str,str) : int``                                | Returns 1 if IUPAC genotype string contains SNP allele str, zero otherwise.                                                     |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``IUPAC2GT(str) : str``                               | Converts IUPAC genotype to 'A1/A2' genotype.                                                                                    |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``IUPACGTSTAT(str,str) : str``                        | Input IUPAC genotypes for subject, father and mother. Returns '0' if IHE, '1' if OK, and '2' if OK and phase-able.              |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``IUPACFA(str,str,str) : str``                        | Returns the SNP allele of the father.  Only valid if IUPACGTSTAT returns 2.                                                     |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``IUPACMA(str,str,str) : str``                        | Returns the SNP allele of the mother.  Only valid if IUPACGTSTAT returns 2.                                                     |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``GTSHARE(str,int,str,str,int,str,str) : int``        | Input two (pos,Ref,Alleles) genotypes where Alleles = 'All1,All2,..' or 'All1/All2/..' or 'All1|All2'                           |
|                                                       | Returns the number of identical allels based on all pairwise comparisons between Alleles1 and Alleles2. First parameter is chr. |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``GTSTAT(int,str,str,int,str,str,int,str,str) : str`` | Input (pos,Ref,Alt) genotypes for subject, father and mother. Returns '0' if IHE, '1' if OK, and '2' if OK and phase-able.      |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``GTFA(int,str,str,int,str,str,int,str,str) : str``   | Returns the Alt allele of the father.  Only valid if GTSTAT returns '2'.                                                        |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``GTMA(int,str,str,int,str,str,int,str,str) : str``   | Returns the Alt allele of the mother.  Only valid if GTSTAT returns '2'.                                                        |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+
| ``INDAG(dag file,str-cont) : bool``                   | Not a standard function.  Should be used as | where go_id INDAG('go.txt','GO\:111111') or INDAG([#temp#],'GO\:111111')          |
+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+



Date Functions
==============

+-----------------------------------+---------------------------------------------------------------------------------+
| ``DATE() : string``               | The current time in the format 'yyyy-MM-dd HH:mm:ss'.                           |
+-----------------------------------+---------------------------------------------------------------------------------+
| ``DATE(string) : string``         | The current time in a specific format, defined by a string of characters        |
|                                   | that represent time units. Example: 'dd/MM/yyyy'.                               |
|                                   | Uses the Java SimpleDateFormat class for formatting.                            |
+-----------------------------------+---------------------------------------------------------------------------------+
| ``EDATE(long) : string``          | A specific time, indicated by a timestamp, in the format 'yyyy-MM-dd HH:mm:ss'. |
+-----------------------------------+---------------------------------------------------------------------------------+
| ``EDATE(long,string) : string``   | A specific time, indicated by a timestamp, in a specific format.                |
|                                   | The format is defined in the same way as with date(string).                     |
+-----------------------------------+---------------------------------------------------------------------------------+
| ``EPOCH() : long``                | A timestamp of the current time.                                                |
+-----------------------------------+---------------------------------------------------------------------------------+
| ``EPOCH(string,string) : long``   | A timestamp of a specific time, indicated with a specified format.              |
|                                   | The format is defined in the same way as with date(string)                      |
|                                   | and edate(long, string). Example: epoch('16/06/2017','dd/MM/yyyy').             |
+-----------------------------------+---------------------------------------------------------------------------------+


Administration Functions
========================

Diagnostic Functions
--------------------

+----------------------------------+------------------------------------------------------------------------------+
| ``TIME() : int``                 | The time in milli seconds since the query started.                           |
+----------------------------------+------------------------------------------------------------------------------+
| ``SLEEP(int) : string``          | Sleep for given milliseconds while processing each row                       |
+----------------------------------+------------------------------------------------------------------------------+
| ``HOSTNAME() : string``          | Name of the host running the query                                           |
+----------------------------------+------------------------------------------------------------------------------+
| ``IP() : string``                | IP number of the host running the query                                      |
+----------------------------------+------------------------------------------------------------------------------+
| ``ARCH() : string``              | CPU architecture of the host running the query                               |
+----------------------------------+------------------------------------------------------------------------------+
| ``THREADID() : int``             | Thread id of the thread running the query                                    |
+----------------------------------+------------------------------------------------------------------------------+
| ``CPULOAD() : float``            | The cpuload of the process running the query                                 |
+----------------------------------+------------------------------------------------------------------------------+
| ``SYSCPULOAD() : float``         | The cpuload on the system running the query                                  |
+----------------------------------+------------------------------------------------------------------------------+
| ``FREE() : float``               | Free physical memory on the system running the query                         |
+----------------------------------+------------------------------------------------------------------------------+
| ``FREEMEM() : float``            | Free memory on the system running the query                                  |
+----------------------------------+------------------------------------------------------------------------------+
| ``TOTALMEM() : float``           | Total memory on the system running the query                                 |
+----------------------------------+------------------------------------------------------------------------------+
| ``MAXMEM() : float``             | Maximum memory of the process running the query                              |
+----------------------------------+------------------------------------------------------------------------------+
| ``AVAILCPU() : int``             | Number of available cpus on the system                                       |
+----------------------------------+------------------------------------------------------------------------------+
| ``OPENFILES() : int``            | Number of open filedescriptors on the system                                 |
+----------------------------------+------------------------------------------------------------------------------+
| ``MAXFILES() : int``             | Maximum number of file descriptors                                           |
+----------------------------------+------------------------------------------------------------------------------+
| ``SYSTEM(string) : string``      | Returns one line from the stdout of a whitelisted system command             |
+----------------------------------+------------------------------------------------------------------------------+
| ``AVGSEEKTIMEMILLIS() : float``  | Returns the average seektime for the current rowSource in milliseconds       |
+----------------------------------+------------------------------------------------------------------------------+
| ``AVGROWSPERMILLIS() : float``   | Returns average rows per millisecond for the current rowSource               |
+----------------------------------+------------------------------------------------------------------------------+
| ``AVGBASESPERMILLIS() : float``  | Returns average bases per millisecond for the current rowSource              |
+----------------------------------+------------------------------------------------------------------------------+


Version Information
-------------------

+----------------------------------+------------------------------------------------------------------------------+
| ``GORVERSION() : string``        | Returns the GOR version                                                      |
+----------------------------------+------------------------------------------------------------------------------+
| ``MAJORVERSION() : int``         | Returns the major version of GOR                                             |
+----------------------------------+------------------------------------------------------------------------------+
| ``MINORVERSION() : int``         | Returns the minor version of GOR                                             |
+----------------------------------+------------------------------------------------------------------------------+
| ``JAVAVERSION() : string``       | Returns the JRE version                                                      |
+----------------------------------+------------------------------------------------------------------------------+
